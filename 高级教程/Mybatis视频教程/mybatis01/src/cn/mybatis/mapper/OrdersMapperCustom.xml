<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离。
注意：使用mapper代理方法开发，namespace有特殊重要的作用。
	namespace等于mapper接口地址（全路径名） -->

<mapper namespace="cn.mybatis.mapper.OrdersMapperCustom">

	<!-- 订单查询关联用户的resultMap -->
	<resultMap id="OrdersUserResultMap" type="cn.mybatis.po.Orders">
		<!-- 配置映射的订单信息 -->
		<!-- id:指定查询列中的标识。订单信息中的唯一标识。如果有多个列组成唯一标识。配置多个id
			column：订单信息唯一标识的列。
			property:订单信息的唯一标识列所映射到Orders中哪个属性
		 -->
		<id column="id" property="id"/>
		<result column="user_id" property="userId" />
		<result column="number" property="number" />
		<result column="createtime" property="createtime" />
		<result column="note" property="note" />
	
		<!-- 配置映射的关联用户信息 -->
		<!-- association:用于映射关联查询单个对象的信息
			property：要将关联查询时用户信息映射到Orders中的哪个属性
		 -->
		<association property="user" javaType="User">
			<!-- id：关联查询用户的唯一标识
				column:指定唯一标识用户信息的列。
			 -->
			<id column="user_id" property="id"/>
			<result column="username" property="username"/>
			<result column="sex" property="sex"/>
			<result column="address" property="address"/>
		</association>
		
	</resultMap>
	
	
	<!-- 查询订单及订单明细的resultMap -->
	<resultMap id="OrdersUserAndOrderDetailResultMap" type="cn.mybatis.po.Orders"
		extends="OrdersUserResultMap">
		<!-- 配置映射的订单信息 -->
		<!-- 配置映射的关联用户信息 -->
		<!-- 使用extends继承映射。用在其中配置订单信息和用户先的映射  -->
		
		
		<!-- 订单明细信息
		一个订单关联查询出了多条明细。要使用collection进行映射。
		collection:对关联查询到多条记录映射到集合对象中。
		property：对关联查询到多条记录映射cn.mybatis.po.Orders的那个属性
		ofType : 指定映射到集合属性中pojo的类型。
		 -->
		 <collection property="orderDetails"
		 	ofType="OrderDetail">
		 	
		 	<!--  -->
		 	<id column="orderdetail_id" property="id"/>
		 	<!--  -->
		 	<result column="orders_d" property="ordersId"/>
		 	<result column="items_id" property="itemsId"/>
		 	<result column="items_num" property="itemsNum"/>
		 </collection>
		
		
	</resultMap>
	
	<!-- 查询用户及购买的商品 -->
	<resultMap id="UserAndItemsResultMap" type="User">
		<!-- 用户信息 -->
		<id column="user_id" property="id"/>
		<result column="username" property="username"/>
		<result column="sex" property="sex"/>
		<result column="address" property="address"/>
		
		<!-- 订单信息
		一个用户对应多个订单，使用collection映射。
		 -->
		<collection property="ordersList" ofType="Orders">
			<id column="id" property="id"/>
			<result column="user_id" property="userId" />
			<result column="number" property="number" />
			<result column="createtime" property="createtime" />
			<result column="note" property="note" />
			
			<!-- 订单明细信息
			一个订单包含多个订单明细 -->
			<collection property="orderDetailList" ofType="OrderDetail">
			 	<id column="orderdetail_id" property="id"/>
			 	<result column="orders_id" property="ordersId"/>
			 	<result column="items_id" property="itemsId"/>
			 	<result column="items_num" property="itemsNum"/>
			 	
			 	<!-- 商品信息 -->
			 	<association property="items" javaType="Items">
			 		<id column="items_id" property="id"/>
				 	<result column="items_name" property="name"/>
				 	<result column="items_detail" property="detail"/>
				 	<result column="items_price" property="price"/>
			 	</association>
			</collection>
			
		</collection>
	
	</resultMap>

	<!-- 查询订单关联查询用户信息,使用resultType -->
	<select id="findOrdersUser"
		resultType="cn.mybatis.po.OrdersCustom">
		SELECT o.*,u.username,u.sex,u.address
		FROM orders o INNER join USER u ON o.user_id = u.id
	</select>
	
	<!-- 查询订单关联查询用户信息,使用resultMap -->
	<select id="findOrdersUserResultMap"
		resultMap="OrdersUserResultMap">
		SELECT o.*,u.username,u.sex,u.address
		FROM orders o INNER join USER u ON o.user_id = u.id
	</select>
	
	<!-- 查询订单关联查询用户及订单明细,使用resultMap -->
	<select id="findOrdersUserAndOrderDetailResultMap"
		resultMap="OrdersUserAndOrderDetailResultMap">
		SELECT o.*,u.username,u.sex,u.address
			,od.`items_id` orderdetail_id,od.`items_id`
			,od.`items_num`,od.`orders_id`
		FROM orders o INNER JOIN USER u ON o.user_id = u.id
		INNER JOIN orderdetail od ON o.id = od.orders_id
	</select>
	
	
	<!-- 查询用户及购买的商品信息,使用resultMap -->
	<select id="findUserAndItemsResultMap"
		resultMap="UserAndItemsResultMap">
		SELECT o.*,u.username,u.sex,u.address
			,od.`items_id` orderdetail_id,od.`items_id`
			,od.`items_num`,od.`orders_id`
			,i.`name` items_name,i.`detail` items_detail
			,i.`price` items_price
		FROM orders o 
		INNER JOIN USER u ON o.user_id = u.id
		INNER JOIN orderdetail od ON o.id = od.orders_id
		INNER JOIN items i ON od.`items_id` = i.`id`
	</select>
	
	
	<!-- 延迟加载的resultMap -->
	<resultMap id="findOrdersUserLazyLoading" type="Orders">
		<!-- 对订单信息进行配置 -->
		<id column="id" property="id"/>
		<result column="user_id" property="userId" />
		<result column="number" property="number" />
		<result column="createtime" property="createtime" />
		<result column="note" property="note" />
		
		<!-- 对用户信息进行延迟加载
		select:指定延迟加载需要执行的statement的id(是根据user_id查询用户信息的statement)
			要使用userMapper.xml中findUserById完成根据用户id(user_id)用户信息的查询
			如果findUserById不在本mapper中需要前边加namespace
		column：订单的信息中关联用户信息查询的列。是user_id
		关联查询的sql理解为：
			SELECT o.*
			(SELECT username FROM USER u WHERE u.id = o.`user_id`) username,
			(SELECT sex FROM USER u WHERE u.id = o.`user_id`) sex,
			FROM orders o
		 -->
		<association property="user" javaType="user"
			select="cn.mybatis.mapper.UserMapper.findUserById" 
			column="user_id"
			>
			<!-- 实现对用户信息进行延迟加载 -->
		</association>
		
	</resultMap>
	
	<!-- 查询订单关联查询用户，用户信息需要延迟加载。 -->
	<select id="findOrdersUserLazyLoading"
		resultMap="findOrdersUserLazyLoading">
		select * from orders
	</select>

</mapper>
