<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离。
注意：使用mapper代理方法开发，namespace有特殊重要的作用。
	namespace等于mapper接口地址（全路径名） -->

<mapper namespace="cn.mybatis.mapper.UserMapper">

	<!-- 开启本mapper的namespace下的二级缓存 
	flushinterval(刷新间隔)
	size(引用数目)，也就是缓存的大小，默认值是1024。
	readOnly(只读)，值为true和false
	
	**************
	mybatis整合ehcache（分布式缓存）
	type：指定cache的实现类的类型。mybatis默认使用PerpetualCache。
	要和ehcache整合，需要配置type为ehcache实现cache接口的类型
	
	和其他缓存整合也是实现cache接口（org.apache.ibatis.cache.Cache）
	-->
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>



	<!-- 定义sql片段。
	id：SQL片段的唯一标示
	
	经验：定义sql片段是基于单表定义的，这样的话这个sql片段可重用性才高。
	在SQL片段中不要包括where
	 -->
	<sql id="query_user_where">
		<if test="userCustom != null">
			<if test="userCustom.sex != null and userCustom.sex != ''">
				and user.sex = #{userCustom.sex}
			</if>
			<if
				test="userCustom.username != null and userCustom.username != ''">
				and user.username like '%${userCustom.username}%'
			</if>
		</if>
		
		<!--  -->
		<if test="ids != null">
			<!-- 使用foreach遍历传入的ids
			collection:指定输入对象中集合属性的名称\
			item:每次遍历生成的对象名
			open:开始遍历时要拼接的字符串。
			close:结束遍历时拼接的字符串。
			separator：遍历的两个对象中间需要拼接的字符串。
			 -->
			and
			<!-- 使用实现下边的sql拼接
			and (id=1 or id=4 or id=5)
			 -->
			<foreach collection="ids" item="id" open="(" close=")"
				separator="or">
				<!-- 每次遍历需要拼接的字符串。 -->
				id=#{id}
			</foreach>
			
			<!-- 实现and id in(1,4,5)拼接 -->
			<!-- <foreach collection="ids" item="id" open="id in(" close=")"
				separator=",">
				#{id}
			</foreach> -->
		</if>
	</sql>


	<!-- 定义resultMap
	将SELECT id id_,username username_ FROM USER 和 User类中的属性做一个映射关系
	
	type：resultMap最终所映射的java对象类型，可已使用别名
	id ： 对resultMap的唯一标示
	 -->
	<resultMap type="user" id="userResultMap">
		<!-- id标示查询结果集中唯一标识
		column : 查询出来的列名
		property ：type所指定的pojo中的属性名
		最终resultMap对column和property做一个映射关系（对应关系）
		 -->
		<id column="id_" property="id" />
		
		<!-- result:对普通名的映射设定。
		column : 查询出来的列名
		property ：type所指定的pojo中的属性名
		最终resultMap对column和property做一个映射关系（对应关系）
		 -->
		<result column="username_" property="username"/>
	</resultMap>

	<!-- 用户信息综合查询。
	#{userCustom.sex}:取出pojo包装对象中性别值。
	${userCustom.username}:取出pojo包装对象中用户名称
	 -->
	<select id="findUserList" parameterType="cn.mybatis.po.UserQueryVo"
		resultType="cn.mybatis.po.UserCustom">
		select * from user
		<!-- 
		where:可以自动的去掉条件中的第一个and
		 -->
		<where>
			<!-- <if test="userCustom != null">
				<if test="userCustom.sex != null and userCustom.sex != ''">
					and user.sex = #{userCustom.sex}
				</if>
				<if test="userCustom.username != null and userCustom.username != ''">
					and user.username like '%${userCustom.username}%'
				</if>
			</if> -->
			
			<!-- 引用sql片段的id，refid指定的id不在本mapper文件中，
				需要前面加namespace -->
			<include refid="query_user_where"></include>
			<!-- 在这里还要引用其他的sql -->
		</where>
	</select>
	
	<!-- 用户信息中综合查询数
	parameterType"指定输入类型和findUserList一样
	resultType:输出结果类型。
	。 -->
	<select id="findUserCount" parameterType="cn.mybatis.po.UserQueryVo"
		resultType="int">
		select count(*)  from user
		<!-- 
		where:可以自动的去掉条件中的第一个and
		 -->
		<where>
			<!-- <if test="userCustom != null">
				<if test="userCustom.sex != null and userCustom.sex != ''">
					and user.sex = #{userCustom.sex}
				</if>
				<if test="userCustom.username != null and userCustom.username != ''">
					and user.username like '%${userCustom.username}%'
				</if>
			</if> -->
			
			<!-- 引用sql片段的id，refid指定的id不在本mapper文件中，
				需要前面加namespace -->
			<include refid="query_user_where"></include>
			<!-- 在这里还要引用其他的sql -->
		</where>
	</select>

	<!-- 在映射文件中配置很多的sql语句 -->
	<!-- 需求：通过ip查询用户表的记录 -->
	<!-- 通过select执行数据库查询 id:标识映射文件中的sql， 将sql语句封装到mappedStatement对象中，所以将id称为statement的id 
		parameterType:指定输入参数的类型,这里指定int型
		#{}表示一个占位符 #{id} :其中的id表示接收输入的参数,参数的名称就是id,如果输入参数是数是简单类型,
			#{}中的参数名可以任意，可以value或其他名称 
		resultType:指定sql输出结果所映射的Java对象的类型，select指定resultType表示将"单条"记录映射成的java对象。 -->
	<!-- <select id="findUserById" parameterType="int"
		resultType="cn.mybatis.po.User">
		SELECT * FROM USER WHERE id = #{id}
	</select> -->
	
	
	
	<!-- 使用resultMap进行输出映射。
	resultMap:指定定义的resultMap的id，如果这个resultMap在其他mapper文件，
		前面需要加namespace
	 -->
	<select id="findUserByIdResultMap" parameterType="int"
		resultMap="userResultMap">
		SELECT id id_,username username_ FROM USER WHERE id = #{id}
	</select>
	
	
	

	<!-- 根据用户名称模糊查询用户信息 
	resultType:指定就是单挑记录所映射的Java对象类型。
	${}:表示拼接SQL串，将接收到的参数的内容不加任何修饰拼接在sql中。
	使用${}拼接sql，引起sql注入
	${value}:接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
	-->
	<select id="findUserByName" parameterType="java.lang.String"
		resultType="user"> <!-- resultType：引用了别名 -->
		SELECT * FROM USER WHERE username LIKE '%${value}%'
	</select>
	
	
	<!-- 添加用户
	parameterType:指定输入类型是pojo(包括用户信息)
	#{}中指定pojo的属性名。接收到pojo对象的属性值。mybatis通过OGNL获取对象的属性值
	
	 -->
	<insert id="insertUser" parameterType="cn.mybatis.po.User">
		<!-- 
		将插入数据的主键返回。返回到user对象中
		SELECT LAST_INSERT_ID():的到刚执行insert进去记录的主键值，只适用于自增主键
		
		keyProperty：将查询到的主键值设置到parameterType指定的对象的那个属性
		order:SELEC执行顺序，相对于insert语句来说它的执行顺序
		resultType:指定SELECT LAST_INSERT_ID()的结果类型
		 -->
		<selectKey keyProperty="id" order="AFTER"
			resultType="java.lang.Integer">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into user(username,birthday,sex,address)
		value(#{username},#{birthday},#{sex},#{address})
		
		<!-- 
		使用mysql的UUID()生成主键（主键不自增）
		执行过程：
		首先通过uuid()得到主键，将主键设置到user对象的id属性中
		其次在inset执行时，从user对象中取出id属性值
		 -->
		<!-- 		
		<selectKey keyProperty="id" order="BEFORE"
			resultType="java.lang.String">
			SELECT uuid()
		</selectKey>
		insert into user(id,username,birthday,sex,address)
		value(#(id),#{username},#{birthday},#{sex},#{address})
		 -->
	</insert>
	
	<!-- 删除用户
	都是id删除用户需要输入id值。
	 -->
	 <delete id="deleteUser" parameterType="java.lang.Integer">
	 	delete from user where id=#{id}
	 </delete>
	 
	 <!-- 更新用户
	 分析：
	 需要传入用户的id。
	 需要传入用户的更新信息。
	 parameterType指定user对象，包括id和更新信息，注意：id必须存在。
	 #{id}:从输入user对象中获取到的id属相值
	  -->
	 <update id="updateUser" parameterType="cn.mybatis.po.User">
	 	update user
	 	set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}
	 	where id=#{id}
	 </update>
	 
	 

	<!-- 禁用某个sql使用二级缓存。
	二级缓存， 在statement中设置useCache="false"时，
	表示该sql禁用二级缓存，默认为true
	 -->
	<select id="findUserById" parameterType="int"
		resultType="cn.mybatis.po.User"
		useCache="true"
		>
		SELECT * FROM USER WHERE id = #{id}
	</select>
	
	<!-- 刷新缓存，就是清空缓存。
	在statement中设置flushCache="true"时，
	表示该sql执行完需要刷新缓存，默认为true。这样可以避免数据库脏读。
	在insert，delete，update中
	 -->

</mapper>
