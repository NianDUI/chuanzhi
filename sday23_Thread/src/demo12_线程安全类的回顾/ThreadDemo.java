package demo12_线程安全类的回顾;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Hashtable;
import java.util.List;
import java.util.Vector;

public class ThreadDemo {
	public static void main(String[] args) {
		// 线程安全的类
		StringBuffer sb = new StringBuffer();
		Vector<String> v = new Vector<String>();
		Hashtable<String, String> h = new Hashtable<String, String>();

		// Vector是线程安全的时候才考虑使用，但是我还说过即使要安全，我也不用你。
		// 那么到底要用谁呢？
		// public static <T> List<T> synchronizedList(List<T> list)
		// a	返回指定列表支持的同步（线程安全的）列表。
		// 线程不安全
		List<String> list1 = new ArrayList<String>();
		// 线程安全
		List<String> list2 = Collections.synchronizedList(new ArrayList<String>());
		
		/*
		 	static <T> Collection<T> 
			 synchronizedCollection(Collection<T> c) 
			          返回指定 collection 支持的同步（线程安全的）collection。 
			static <T> List<T> 
			 synchronizedList(List<T> list) 
			          返回指定列表支持的同步（线程安全的）列表。 
			static <K,V> Map<K,V> 
			 synchronizedMap(Map<K,V> m) 
			          返回由指定映射支持的同步（线程安全的）映射。 
			static <T> Set<T> 
			 synchronizedSet(Set<T> s) 
			          返回指定 set 支持的同步（线程安全的）set。 
			static <K,V> SortedMap<K,V> 
			 synchronizedSortedMap(SortedMap<K,V> m) 
			          返回指定有序映射支持的同步（线程安全的）有序映射。 
			static <T> SortedSet<T> 
			 synchronizedSortedSet(SortedSet<T> s) 
			          返回指定有序 set 支持的同步（线程安全的）有序 set。 
		 */
	}
}
